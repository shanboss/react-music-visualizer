{"version":3,"sources":["../src/AudioVisualizer.tsx"],"sourcesContent":["\"use client\";\nimport React, {\n  useRef,\n  useState,\n  useEffect,\n  RefObject,\n  ChangeEvent,\n} from \"react\";\n\ntype AudioVisualizer = {\n  showScrubber?: boolean;\n  color?: string;\n  height?: number;\n  song: string;\n  numBars?: number;\n  sampleRate?: number;\n  fftSize?: number;\n  startFreq?: number;\n  endFreq?: number;\n};\n\nexport default function AudioVisualizer({\n  showScrubber = true,\n  height = 60,\n  color = \"#4E80EE\",\n  song,\n  fftSize = 4096,\n  numBars = 80,\n  startFreq = 20,\n  endFreq = 20000,\n  sampleRate = 44100,\n}: AudioVisualizer) {\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [progress, setProgress] = useState(0); // 0â€“100 %\n\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const dataArrayRef = useRef<Uint8Array | null>(null);\n  const barRefs = useRef<HTMLDivElement[]>([]);\n  const gainNodeRef = useRef<GainNode | null>(null);\n\n  const getFrequencyForBin = (\n    index: number,\n    sampleRate = 44100,\n    fftSize = 8192\n  ) => {\n    const nyquist = sampleRate / 2;\n    return ((index + 0.5) * nyquist) / (fftSize / 2);\n  };\n\n  const formatTime = (secs: number): string =>\n    isNaN(secs)\n      ? \"0:00\"\n      : `${Math.floor(secs / 60)}:${(\"0\" + Math.floor(secs % 60)).slice(-2)}`;\n\n  const handleSeek = (e: ChangeEvent<HTMLInputElement>) => {\n    const pct = parseFloat(e.target.value);\n    const a = audioRef.current;\n    if (a && a.duration) {\n      a.currentTime = (pct / 100) * a.duration;\n      setProgress(pct);\n    }\n  };\n\n  const togglePlay = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audioContextRef.current?.resume();\n      audio.play();\n\n      if (gainNodeRef.current && audioContextRef.current) {\n        const time = audioContextRef.current.currentTime;\n        gainNodeRef.current.gain.cancelScheduledValues(time);\n        gainNodeRef.current.gain.setValueAtTime(0, time);\n        gainNodeRef.current.gain.linearRampToValueAtTime(1, time + 1);\n      }\n    }\n\n    setIsPlaying(!isPlaying);\n  };\n\n  // logIndices: log-distributed bins\n  const logBins = new Set<number>();\n  const logIndices: number[] = [];\n  const nyquist = sampleRate / 2;\n\n  for (let i = 0; i < numBars * 3; i++) {\n    const logIndex = i / (numBars * 3 - 1);\n    const freq = startFreq * Math.pow(endFreq / startFreq, logIndex);\n    if (freq > nyquist) break;\n    const bin = Math.floor((freq / nyquist) * (fftSize / 2));\n    if (bin === 0) continue;\n    if (!logBins.has(bin)) {\n      logBins.add(bin);\n      logIndices.push(bin);\n    }\n    if (logIndices.length === numBars) break;\n  }\n\n  useEffect(() => {\n    if (!audioRef.current) return;\n\n    const audioCtx = new window.AudioContext();\n    const analyser = audioCtx.createAnalyser();\n    analyser.smoothingTimeConstant = 0.15;\n    analyser.fftSize = 8192;\n\n    const source = audioCtx.createMediaElementSource(audioRef.current);\n    const gainNode = audioCtx.createGain();\n    gainNode.gain.value = 0;\n\n    source.connect(analyser);\n    analyser.connect(gainNode);\n    gainNode.connect(audioCtx.destination);\n\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n\n    audioContextRef.current = audioCtx;\n    analyserRef.current = analyser;\n    dataArrayRef.current = dataArray;\n    gainNodeRef.current = gainNode;\n\n    return () => {\n      analyser.disconnect();\n      source.disconnect();\n      audioCtx.close();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!analyserRef.current || !dataArrayRef.current) return;\n\n    let animationId: number;\n    const animate = () => {\n      analyserRef.current!.getByteFrequencyData(dataArrayRef.current!);\n      logIndices.forEach((bin, i) => {\n        const val = dataArrayRef.current![bin] || 0;\n        const pct = Math.max(1, (val / 255) * 100);\n        const bar = barRefs.current[i];\n        if (bar) bar.style.height = pct + \"%\";\n      });\n      animationId = requestAnimationFrame(animate);\n    };\n    animate();\n\n    return () => cancelAnimationFrame(animationId);\n  }, []);\n\n  return (\n    <div className=\"p-4 text-white w-full\">\n      <audio\n        ref={audioRef}\n        src={song}\n        preload=\"auto\"\n        onTimeUpdate={() => {\n          const a = audioRef.current;\n          if (a && a.duration) setProgress((a.currentTime / a.duration) * 100);\n        }}\n        onLoadedMetadata={() => setProgress(0)}\n      />\n      <button onClick={togglePlay}>{isPlaying ? \"Pause\" : \"Play\"}</button>\n\n      {/* Scrubber */}\n      {showScrubber && (\n        <div\n          className=\"mt-2 flex items-center gap-2 w-full rounded-lg p-2\"\n          style={{ background: color }}\n        >\n          <span className=\"text-xs w-12 text-right\">\n            {formatTime(audioRef.current?.currentTime || 0)}\n          </span>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            step=\"0.1\"\n            value={progress}\n            onChange={handleSeek}\n            className=\"flex-1 cursor-pointer\"\n            style={{ accentColor: color }}\n          />\n          <span className=\"text-xs w-12\">\n            {formatTime(audioRef.current?.duration || 0)}\n          </span>\n        </div>\n      )}\n\n      {/* Bars */}\n      <div\n        className=\"flex items-end gap-px mt-4 w-full overflow-hidden\"\n        style={{ height: typeof height === \"number\" ? `${height}px` : height }}\n      >\n        {logIndices.map((bin, i) => {\n          const freqLabel = getFrequencyForBin(bin);\n          const keyFreqs = [20, 100, 1000, 10000, 20000];\n          const showLabel = keyFreqs.some((f) => {\n            const tol = f < 100 ? 2 : f < 1000 ? 20 : 200;\n            return Math.abs(freqLabel - f) < tol;\n          });\n\n          return (\n            <div\n              key={i}\n              ref={(el) => {\n                barRefs.current[i] = el!;\n              }}\n              className=\"flex flex-col items-center flex-1 basis-0 duration-150 rounded-full\"\n              style={{ height: \"1%\" }}\n            >\n              <div\n                className=\"w-full h-full rounded-full\"\n                style={{ background: color }}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","names":["sampleRate","fftSize","nyquist"]}